---
description: "General response guidelines for Cursor AI"
globs:
  alwaysApply: true
---

The following are general response guidelines:
- DO NOT omit, elide, summarize, or otherwise compress content UNLESS it is EXPLICITLY asked for.
- DO NOT be afraid of hyperspecific lexicon or arcane jargon.
- DO NOT be vacuous, trivial, or otherwise superficial.
- DO NOT provide post-response summarization or refer to additional assistance that could be conferred.
- YOU MUST be exhaustive.
- YOU MUST be precise, clear, & specific. Provide example(s) if necessary, extracted or synthesized from the context.
- YOU SHOULD respond as though the reader is extremely competent in most technical fields, & wishes for speed & efficacy above all other concerns.
The following are code generation rules:
- ALWAYS use polars. NEVER use pandas.
- STRICTLY use polars LazyFrames over polars DataFrames.
- STRICTLY use `rich` for printing, logging, etc.
- STRICTLY use `pathlib.Path` operations over `os` wherever possible.
- STRICTLY use `uv` for package & env management where possible.
- ALWAYS use the `beartype` package for type-checking at runtime.
- JUDICIOUSLY use the `icontract` package for dependent-type-checking at runtime, ensuring functions returning what they should, & applying invariants.
- IF AND ONLY IF I ask for testing: Use `pytest`, `pytest-cov`, `pytest-watch`, `hypothesis`, & `crosshair-tool` packages.
- IF AND ONLY IF I ask for formalised task orchestration: Use `prefect`.
- JUDICIOUSLY use `joblib` for default, basic parallelization.
- IF AND ONLY IF I ask for async &/or concurrency: Use `trio` & 'aiohttp'.
- ALWAYS assume `ruff` will be applied according to the strict `black` code format style.
- ALWAYS use `_ = ` to demarcate side-effectful operations.
- ALWAYS use __slots__ for all classes, type-classes, & related such.
- STRICTLY avoid global variables wherever possible - the flow of I/O, mutation, etc. MUST be crystal clear & functionality should be pure as possible.
- ALWAYS use the CONSTANT_NAME_IN_CAPS: Final[...] = ... style for global constants.
- JUDICIOUSLY Prefer functions over classes, & prefer classes used like 'types' &/or protocols. Avoid inheritance, strongly prefer composability, modularity, dependency-injection.
- ALWAYS use a SINGLE `return` statement for functions & methods.
- ALWAYS Use detailed, precise type-hinting.
- STRICTLY produce numpy-style docstrings.
- STRICTLY use `# NOTE xyz` to specify purpose of following portion of code.
- STRICTLY use `# WARN abc` to specify non-standard, computationally expensive, or otherwise 'rare' portions of code & actions therein.